name: Code Coverage Report Action
author: Roche
description: Action that converts a Cobertura XML report into a markdown report.

inputs:
  token:
    description: Github token to use to publish the check.
    required: false
    default: ${{ github.token }}
  path:
    description: Path to the Cobertura coverage XML report.
    required: false
    default: "."
  threshold:
    description: The minimum allowed coverage percentage, as a real number.
    required: false
    default: 0
  fail:
    description: Fail the action when the minimum coverage was not met.
    required: false
    default: true
  publish:
    description: Path to package's root.
    required: false
    default: false

branding: # https://feathericons.com/
  icon: "umbrella"
  color: "red"

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PyCobertura
      run: pip install -q pycobertura==2.1.0
      shell: bash

    - name: Generate text report
      run: |
        pycobertura show ${{ inputs.path }} --output .coverage-output
        cat .coverage-output
      shell: bash

    - name: Get total
      run: |
        grep -E "^TOTAL " .coverage-output | \
          awk '{print $NF}' | tr -d '%' > .coverage-total
      shell: bash

    - name: Generate report body
      if: "contains(inputs.publish, 'true')"
      run: |
        echo -e "### Code Coverage for ${{ github.sha }}\n" > .coverage-output.final
        echo -e "\`\`\`" >> .coverage-output.final
        cat .coverage-output >> .coverage-output.final
        echo -e "\n\`\`\`\n" >> .coverage-output.final
        echo -e "\n_Minimum allowed coverage is \`$(cat .coverage-total)%\`_\n" >> .coverage-output.final
      shell: bash

    - name: Post as comment
      if: "contains(inputs.publish, 'true')"
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: ${{ inputs.path }}
        path: .coverage-output.final
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Check threshold
      if: "contains(inputs.fail, 'true')"
      run: |
        with open('.coverage-total', 'r') as t:
          total = float(t.read().rstrip())
        min = float('${{ inputs.threshold }}')
        if total < min:
          raise SystemExit(
            f"Total Coverage of {total}% falls below minimum threshold of {min}%."
          )
      shell: python
