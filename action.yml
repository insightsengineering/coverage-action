---
# yamllint disable rule:line-length
name: Code Coverage Report Action
author: Inisghts Engineering
description: Action that converts a Cobertura XML report into a markdown report.

inputs:
  token:
    description: Github token to use to publish the check.
    required: false
    default: ${{ github.token }}
  path:
    description: Path to the Cobertura coverage XML report.
    required: false
    default: coverage.xml
  threshold:
    description: The minimum allowed coverage percentage, as a real number.
    required: false
    default: 0
  fail:
    description: Fail the action when the minimum coverage was not met.
    required: false
    default: true
  publish:
    description: Publish the coverage report as an issue comment.
    required: false
    default: false
  diff:
    description: Create a diff of the coverage report.
    required: false
    default: false
  diff-branch:
    description: Branch to diff against.
    required: false
    default: main
  diff-storage:
    description: Branch where coverage reports are stored for diff purposes.
    required: false
    default: _xml_coverage_reports
  coverage-reduction-failure:
    description: Fail the action if code coverage decreased compared to the `diff-branch` is decreased.
    required: false
    default: false
  new-uncovered-statements-failure:
    description: Fail the action if any new uncovered statements are introduced compared to the `diff-branch`.
    required: false
    default: false
  pycobertura-exception-failure:
    description: Fail the action in case of a `Pycobertura` exception.
    required: false
    default: true

branding: # https://feathericons.com/
  icon: "umbrella"
  color: "red"

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install pycobertura
      uses: BSFishy/pip-action@v1
      with:
        packages: pycobertura==2.1.0

    - name: Get branch names
      id: branch-names
      uses: tj-actions/branch-names@v5.1

    - name: Generate text report
      run: |
        mkdir -p coverage-action
        cp ${{ inputs.path }} coverage-action/
        pycobertura show ${{ inputs.path }} --output .coverage-output
        cat .coverage-output
      shell: bash

    - name: Fetch report from ${{ inputs.diff-storage }}
      uses: actions/checkout@v2
      with:
        path: ${{ inputs.diff-storage }}
        fetch-depth: 0

    - name: Initialize storage branch
      working-directory: ${{ inputs.diff-storage }}
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        # Switch to the branch if it already exists
        git switch ${{ inputs.diff-storage }} || true
        git pull origin ${{ inputs.diff-storage }} || true
        # Create the branch if it doesn't exist yet
        git checkout --orphan ${{ inputs.diff-storage }} || true
        # Ensure that the bare minimum components exist in the branch
        mkdir -p data
        touch README.md data/.gitkeep
        # Copy necessary files and folders to a temporary location
        cp -r .git README.md data /tmp/
        # Remove everything else
        # Attribution: https://unix.stackexchange.com/a/77313
        rm -rf ..?* .[!.]* *
        # Restore files from the temporary location
        cp -r /tmp/.git /tmp/README.md /tmp/data .
        git add --all -f
        git commit -m "Update storage branch: $(date)" || true
      shell: bash

    - name: Push storage branch
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ inputs.token }}
        branch: ${{ inputs.diff-storage }}
        directory: ${{ inputs.diff-storage }}
        force: true

    - name: Generate diff against ${{ inputs.diff-branch }}
      if: contains(inputs.diff, 'true')
      run: |
        pushd ${{ inputs.diff-storage }}
        git checkout ${{ inputs.diff-storage }} || touch ${{ inputs.diff-storage }}-not-found
        popd
        if [[ -f "${{ inputs.diff-storage }}/data/${{ inputs.diff-branch }}/coverage.xml" && (! -f ${{ inputs.diff-storage }}-not-found) ]]
        then {
          pycobertura diff --no-color --no-source ${{ inputs.diff-storage }}/data/${{ inputs.diff-branch }}/coverage.xml \
            ${{ inputs.path }} \
            --output .coverage-output.diff && pycobertura_status=$? || pycobertura_status=$?
            # Save status both in case of success and failure.
            echo "pycobertura_status=$pycobertura_status" >> $GITHUB_ENV
          cat .coverage-output.diff
        } else {
          echo "${{ inputs.diff-storage }}/data/${{ inputs.diff-branch }}/coverage.xml not found! Not diffing."
        }
        fi
      shell: bash

    - name: Get total
      run: |
        grep -E "^TOTAL " .coverage-output | \
          awk '{print $NF}' | tr -d '%' > .coverage-total
      shell: bash

    - name: Store coverage percent
      id: coverage_percent
      run: |
        echo "::set-output name=coverage_total::$(cat .coverage-total)"
        BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        echo "diff_storage_branch=$BRANCH" >> $GITHUB_ENV
        mkdir -p ${{ inputs.diff-storage }}/data
        mkdir -p ${{ inputs.diff-storage }}/data/${BRANCH}
      shell: bash

    # Use the output from the `coverage_percent` step
    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: 'Test Coverage'
        status: "${{ steps.coverage_percent.outputs.coverage_total }}%"
        color: ${{
          steps.coverage_percent.outputs.coverage_total > 90 && 'green'              ||
          steps.coverage_percent.outputs.coverage_total > 80 && 'yellow,green'       ||
          steps.coverage_percent.outputs.coverage_total > 70 && 'yellow'             ||
          steps.coverage_percent.outputs.coverage_total > 60 && 'orange,yellow'      ||
          steps.coverage_percent.outputs.coverage_total > 50 && 'orange'             ||
          steps.coverage_percent.outputs.coverage_total > 40 && 'red,orange'         ||
          steps.coverage_percent.outputs.coverage_total > 30 && 'red,red,orange'     ||
          steps.coverage_percent.outputs.coverage_total > 20 && 'red,red,red,orange' ||
          'red' }}
        path: ${{ inputs.diff-storage }}/data/${{ env.diff_storage_branch }}/badge.svg

    - name: Commit badge
      working-directory: ${{ inputs.diff-storage }}/data
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git switch ${{ inputs.diff-storage }} || true
        git pull origin ${{ inputs.diff-storage }}
        git add "${{ env.diff_storage_branch }}/badge.svg"
        git commit -m "Add/Update badge: ${{ github.sha }}" || true
      shell: bash

    # Badge has to be committed and pushed to be used in comment
    - name: Push badges
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ inputs.token }}
        branch: ${{ inputs.diff-storage }}
        directory: ${{ inputs.diff-storage }}/data

    - name: Generate issue comment body
      if: contains(inputs.publish, 'true')
      run: |
        BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        echo -e "![badge](https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ inputs.diff-storage }}/data/${{ env.diff_storage_branch }}/badge.svg)\n\n" > .coverage-output.final
        echo -e "## Code Coverage Summary\n" >> .coverage-output.final
        echo -e "\`\`\`" >> .coverage-output.final
        cat .coverage-output >> .coverage-output.final
        echo -e "\n\`\`\`\n" >> .coverage-output.final
        if [[ "${{ inputs.diff }}" == "true" && -f .coverage-output.diff ]]
        then {
          echo -e "### Diff against ${{ inputs.diff-branch }}\n" >> .coverage-output.final
          echo -e "\`\`\`" >> .coverage-output.final
          cat .coverage-output.diff >> .coverage-output.final
          echo -e "\n\`\`\`\n" >> .coverage-output.final
        }
        fi
        echo -e "\nResults for commit: ${{ github.sha }}\n" >> .coverage-output.final
        echo -e "\n_Minimum allowed coverage is \`${{ inputs.threshold }}%\`_\n" >> .coverage-output.final
        echo -e "\n:recycle: This comment has been updated with latest results\n" >> .coverage-output.final
      shell: bash

    - name: Post as comment
      if: contains(inputs.publish, 'true')
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: ${{ inputs.path }}
        path: .coverage-output.final

    - name: Commit XML report to ${{ inputs.diff-storage }}
      if: >
        contains(inputs.diff, 'true')
      working-directory: ${{ inputs.diff-storage }}
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git switch ${{ inputs.diff-storage }}
        git pull origin ${{ inputs.diff-storage }}
        filename=$(basename ${{ inputs.path }})
        mv ../coverage-action/${filename} ./data/${{ env.diff_storage_branch }}/coverage.xml
        git add -f "./data/${{ env.diff_storage_branch }}/coverage.xml"
        git commit -m "Coverage report for ${{ github.sha }}" || true
      shell: bash

    - name: Push XML report to ${{ inputs.diff-storage }}
      if: >
        contains(inputs.diff, 'true')
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ inputs.token }}
        branch: ${{ inputs.diff-storage }}
        directory: ${{ inputs.diff-storage }}/data

    - name: Check threshold
      if: contains(inputs.fail, 'true')
      run: |
        with open('.coverage-total', 'r') as t:
          total = float(t.read().rstrip())
        min = float('${{ inputs.threshold }}')
        if total < min:
          raise SystemExit(
            f"Total Coverage of {total}% falls below minimum threshold of {min}%."
          )
      shell: python

    - name: Fail if coverage worsened
      if: contains(inputs.diff, 'true')
      run: |
        if [[ "${{ env.pycobertura_status }}" == "2" && "${{ inputs.coverage-reduction-failure }}" == "true" ]]
        then {
          echo "Code changes worsened the overall coverage."
          exit 1
        }
        fi
        if [[ "${{ env.pycobertura_status }}" == "3" && "${{ inputs.new-uncovered-statements-failure }}" == "true" ]]
        then {
          echo "Code changes introduced uncovered statements but the overall coverage is better than before."
          exit 1
        }
        fi
        if [[ "${{ env.pycobertura_status }}" == "1" && "${{ inputs.pycobertura-exception-failure }}" == "true" ]]
        then {
          echo "Pycobertura exception occurred."
          exit 1
        }
        fi
      shell: bash

    - name: Clean up intermediate files
      if: always()
      run: |
        rm -rf coverage-action .coverage-output.final .coverage-output \
          .coverage-total .coverage-output.diff \
          ${{ inputs.diff-storage }}-not-found
      shell: bash
